from unittest.mock import AsyncMock, MagicMock, patch

import pytest

from weatherbot.handlers.messages import on_location, on_text


@pytest.mark.asyncio
async def test_on_location_success():

    update = MagicMock()
    update.message.location.latitude = 55.7558
    update.message.location.longitude = 37.6176
    update.effective_chat.id = 123456
    update.message.reply_text = AsyncMock()
    context = MagicMock()
    mock_weather_data = {"temperature": 15, "description": "–æ–±–ª–∞—á–Ω–æ", "place": "–ú–æ—Å–∫–≤–∞"}
    with (
        patch("weatherbot.handlers.messages.get_user_service") as mock_user_service,
        patch(
            "weatherbot.handlers.messages.get_weather_application_service"
        ) as mock_weather_service,
        patch("weatherbot.handlers.messages.format_weather") as mock_format,
        patch("weatherbot.handlers.messages.main_keyboard") as mock_keyboard,
    ):
        user_service = AsyncMock()
        user_service.get_user_language.return_value = "ru"
        mock_user_service.return_value = user_service
        weather_service = AsyncMock()
        weather_service.get_weather_by_coordinates.return_value = mock_weather_data
        mock_weather_service.return_value = weather_service
        mock_format.return_value = "–ú–æ—Å–∫–≤–∞: 15¬∞C, –æ–±–ª–∞—á–Ω–æ"
        mock_keyboard.return_value = None
        await on_location(update, context)

    weather_service.get_weather_by_coordinates.assert_awaited_once_with(
        55.7558, 37.6176
    )
    update.message.reply_text.assert_awaited_once()


@pytest.mark.asyncio
async def test_on_location_weather_error():

    update = MagicMock()
    update.message.location.latitude = 55.7558
    update.message.location.longitude = 37.6176
    update.effective_chat.id = 123456
    update.message.reply_text = AsyncMock()
    context = MagicMock()
    with (
        patch("weatherbot.handlers.messages.get_user_service") as mock_user_service,
        patch(
            "weatherbot.handlers.messages.get_weather_application_service"
        ) as mock_weather_service,
        patch("weatherbot.handlers.messages.i18n.get") as mock_i18n,
    ):
        user_service = AsyncMock()
        user_service.get_user_language.return_value = "ru"
        mock_user_service.return_value = user_service
        weather_service = AsyncMock()
        from weatherbot.core.exceptions import WeatherServiceError

        weather_service.get_weather_by_coordinates.side_effect = WeatherServiceError(
            "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        )
        mock_weather_service.return_value = weather_service
        mock_i18n.return_value = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã"
        await on_location(update, context)

    update.message.reply_text.assert_awaited_once()


@pytest.mark.asyncio
async def test_on_text_city_weather():
    from weatherbot.handlers import messages

    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞"""
    update = MagicMock()
    update.message.text = "–ú–æ—Å–∫–≤–∞"
    update.effective_chat.id = 123456
    update.message.reply_text = AsyncMock()

    context = MagicMock()

    user_service = AsyncMock()
    user_service.get_user_language.return_value = "ru"

    weather_service = AsyncMock()
    weather_data = {"temperature": 15, "description": "—è—Å–Ω–æ"}
    weather_service.get_weather_by_city.return_value = (weather_data, None)

    from weatherbot.infrastructure.state import awaiting_city_weather

    awaiting_city_weather[123456] = True

    with (
        patch(
            "weatherbot.handlers.messages.get_user_service", return_value=user_service
        ),
        patch(
            "weatherbot.handlers.messages.get_weather_application_service",
            return_value=weather_service,
        ),
        patch(
            "weatherbot.handlers.messages.format_weather",
            return_value="–ú–æ—Å–∫–≤–∞: 15¬∞C, —è—Å–Ω–æ",
        ),
        patch("weatherbot.handlers.messages.main_keyboard", return_value=None),
    ):
        await messages.on_text(update, context)

    weather_service.get_weather_by_city.assert_awaited_once_with("–ú–æ—Å–∫–≤–∞")
    update.message.reply_text.assert_awaited_once()

    assert 123456 not in awaiting_city_weather


@pytest.mark.asyncio
async def test_on_text_set_home():

    with (
        patch("weatherbot.handlers.messages.awaiting_sethome", {123456: True}),
        patch("weatherbot.handlers.messages.last_location_by_chat", {}),
        patch("weatherbot.handlers.messages.get_user_service") as mock_user_service,
        patch(
            "weatherbot.handlers.messages.get_weather_application_service"
        ) as mock_weather_service,
    ):
        update = MagicMock()
        update.message.text = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        update.effective_chat.id = 123456
        update.message.reply_text = AsyncMock()
        context = MagicMock()

        user_service = AsyncMock()
        user_service.get_user_language.return_value = "ru"
        user_service.set_user_home = AsyncMock()
        mock_user_service.return_value = user_service

        weather_service = AsyncMock()
        weather_service.geocode_city = AsyncMock(
            return_value=(59.9311, 30.3609, "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –†–æ—Å—Å–∏—è")
        )
        mock_weather_service.return_value = weather_service

        with patch(
            "weatherbot.handlers.messages.i18n.get", return_value="–î–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        ):
            await on_text(update, context)

        weather_service.geocode_city.assert_awaited_once_with("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
        user_service.set_user_home.assert_awaited_once()


@pytest.mark.asyncio
async def test_on_text_keyboard_buttons():

    test_cases = [
        ("‚òÅÔ∏è –ü–æ–≥–æ–¥–∞ –ø–æ –≥–æ—Ä–æ–¥—É", "weather_prompt"),
        ("üè† –ü–æ–≥–æ–¥–∞ –¥–æ–º–∞", "home_weather"),
        ("‚ûï –ó–∞–¥–∞—Ç—å –¥–æ–º", "sethome_prompt"),
        ("üóë –£–¥–∞–ª–∏—Ç—å –¥–æ–º", "unsethome"),
        ("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help_message"),
    ]
    for button_text, expected_action in test_cases:
        update = MagicMock()
        update.message.text = button_text
        update.effective_chat.id = 123456
        update.message.reply_text = AsyncMock()
        context = MagicMock()
        with patch(
            "weatherbot.handlers.messages.get_user_service"
        ) as mock_user_service:
            user_service = AsyncMock()
            user_service.get_user_language.return_value = "ru"
            mock_user_service.return_value = user_service
            with patch(
                "weatherbot.handlers.messages.i18n.get",
                return_value=f"–û—Ç–≤–µ—Ç –Ω–∞ {expected_action}",
            ):
                await on_text(update, context)

        update.message.reply_text.assert_awaited()
        update.message.reply_text.reset_mock()


@pytest.mark.asyncio
async def test_on_text_unknown_message():

    update = MagicMock()
    update.message.text = "–ö–∞–∫–æ–π-—Ç–æ —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç"
    update.effective_chat.id = 123456
    update.message.reply_text = AsyncMock()
    context = MagicMock()
    with (
        patch("weatherbot.handlers.messages.get_user_service") as mock_user_service,
        patch("weatherbot.handlers.messages.i18n.get") as mock_i18n,
    ):
        user_service = AsyncMock()
        user_service.get_user_language.return_value = "ru"
        mock_user_service.return_value = user_service
        mock_i18n.return_value = "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É"
        await on_text(update, context)

    update.message.reply_text.assert_awaited_once()
